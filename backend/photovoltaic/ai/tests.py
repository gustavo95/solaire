from django.test import SimpleTestCase
from photovoltaic.ai.lstm_power_forecaster import LstmPowerForecaster
import numpy as np

class AITests(SimpleTestCase):
    def test_lstm_algorithm(self):
        input_data = [27.58, 26.6, 41.31, 28.39, 26.57, 41.54, 29.75, 26.29, 74.04, 31.27, 26.28, 70.62, 32.81, 26.39, 80.7, 34.27, 26.51, 86.1, 34.24, 26.59, 79.31, 33.28, 26.45, 80.3, 32.36, 26.46, 75.12, 30.57, 26.5, 59.56, 30.41, 26.47, 52.85, 30.81, 26.51, 50.45, 31.99, 26.69, 65.85, 32.37, 26.63, 68.88, 32.88, 26.58, 71.74, 33.34, 26.29, 76.51, 34.9, 26.56, 80.9, 38.41, 26.7, 101.9, 40.65, 26.6, 116.2, 40.76, 26.38, 118.4, 38.16, 26.77, 84.4, 36.21, 26.83, 77.78, 35.2, 26.71, 72.37, 36.36, 26.68, 86.5, 38.15, 26.58, 93.1, 39.82, 26.97, 97.4, 40.64, 27.08, 104.2, 40.54, 26.6, 106.1, 37.98, 26.73, 85.3, 36.68, 26.53, 81.3, 37.94, 26.65, 79.42, 38.74, 26.97, 82.5, 40.39, 26.84, 106.8, 43.69, 27.15, 122.6, 47.97, 26.78, 134.2,53.51, 26.93, 164.0, 56.14, 26.56, 173.9, 56.67,26.69, 180.5, 60.96, 26.79, 214.5, 70.39, 26.77, 248.5, 102.8, 27.0, 404.3, 148.6, 26.97, 651.4, 195.1, 27.43, 906.0, 208.7, 27.7, 987.0, 216.0, 27.85, 1029.0, 220.9, 27.99, 1028.0, 231.9, 28.27, 1099.0, 245.9, 28.69, 1164.0, 248.8, 29.06, 1181.0 , 235.0, 29.72, 1084.0, 249.6, 29.99, 1151.0, 255.3, 30.23, 1163.0, 227.8, 30.7, 1022.0, 179.3, 30.7, 762.3, 179.3, 30.24, 757.0, 178.3, 29.73, 745.8, 158.1, 29.18, 644.4, 152.1, 29.2, 618.1, 171.4, 29.14, 711.6, 168.5, 29.21, 703.9, 167.4, 29.79, 688.4, 253.8, 30.04, 1131.0, 261.6, 30.1, 1160.0, 202.2, 30.59, 857.0, 182.8, 31.0, 750.4, 194.0, 31.23, 813.0, 177.3, 31.51, 732.6, 222.1, 31.41, 978.0, 213.9, 31.58, 924.0, 206.7, 31.62, 882.0, 199.7, 32.08, 854.0, 209.9, 32.39, 902.0, 222.4, 32.69, 962.0, 254.5, 33.16, 1112.0, 306.1, 33.43, 1385.0, 204.2, 33.44, 874.0, 253.2, 33.66, 1108.0, 345.1, 34.04, 1587.0, 357.6, 34.63, 1665.0, 337.9, 35.02, 1551.0, 287.6, 35.52, 1290.0, 257.0, 35.15, 1125.0, 218.6, 35.55, 934.0, 210.6, 35.39, 875.0, 260.6, 35.4, 1153.0, 342.1, 35.38, 1573.0, 333.1, 35.18, 1528.0, 311.3, 35.67, 1401.0, 262.4, 36.21, 1156.0, 313.8, 36.31, 1416.0, 380.3, 36.38, 1773.0, 350.8, 36.45, 1617.0, 213.1, 36.14, 895.0, 177.8, 35.83, 729.3, 322.3, 36.17, 1462.0, 438.2, 36.13, 2092.0, 374.0, 36.44, 1751.0, 278.7, 36.68, 1212.0, 339.0, 37.11, 1522.0, 400.9, 37.16, 1876.0, 346.2, 37.07, 1585.0, 288.4, 37.34, 1304.0, 277.0, 37.22, 1225.0, 315.0, 36.87, 1423.0, 310.2, 37.37, 1407.0, 288.9, 37.48, 1297.0, 279.1, 36.44, 1226.0, 192.7, 36.71, 787.1, 190.5, 36.68, 772.2, 205.3, 35.78, 846.0, 304.1, 36.0, 1345.0, 417.5, 36.25, 1944.0, 362.2, 36.74, 1659.0, 313.2, 36.71, 1391.0, 264.2, 35.89, 1128.0, 254.4, 36.02, 1066.0, 261.8, 35.24, 1107.0, 270.8, 35.2, 1151.0, 264.2, 35.09, 1125.0, 254.3, 35.06, 1077.0]

        my_alg = LstmPowerForecaster()
        prediction = my_alg.compute_prediction(input_data)
        y_true = np.array([[1075.5977, 1082.3016, 1104.911 , 1125.4369, 1146.1416]])
        
        self.assertEqual(True, np.allclose(y_true, prediction,rtol=1e-5, atol=0))
        
